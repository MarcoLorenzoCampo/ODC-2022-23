#debug the program and stop at brva 0x1574 which is the line where it start executing the code obtained by the function obtained in the previous line
#we try to dump the code => dump binary memory code.bin $rax ($rax + 0x78)
#actually the program download from the server 3 different pieces of code
#The first one download some data and save them in the allocated chunk
#The second one make some operations on our input. (It takes our flag and for 8 times it xors 8 bytes of it (shifting every time, even if the flag is shorter) with the first 8 bytes of downloaded data).
#The third one check the result.

#This script is useful to create a binary with the assembly code in order to read it outside of gdb if necessary.
"""
from pwn import *
f = open("./code.bin","rb")
content = f.read()
f.close()
print(disasm(content))
"""

#Some useful addresses
#0x55555555b6b0 allocated chunk
#0x007fffffffe1c5 my input/flag

#We create a script to make the xor of data in order to obtain the flag

from pwn import *
import array

data = b"\xcc\xc7\x35\xaa\xba\xc3\x27\x48\xaa\xab\x54\xcd\xc1\xa0\x48\x26\xab\xb5\x54\xde\xcf\xaf\x46\x3c\xa5\xa8\x5b\xd0\xe5\xe2\x78\x31\xa3\xb2\x6a\xcd\xd5\xb7\x78\x3c\xa4\xa2\x6a\xcc\xd6\xa2\x40\x17\xaa\xb5\x5a\xc7\xe5\xa7\x5e\x26\xed\x98\x42\xcb\xc9\x9c\x4e\x3c\x93\xaf\x54\xd8\xde\x9c\x18\x35"
flag = ""

for index in range(1,9):
    for jndex in range (8):
        flag +=chr(data[index*8+jndex] ^  data[jndex])
print(flag)